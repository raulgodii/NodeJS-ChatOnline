#!/usr/bin/env node
const { Server } = require('socket.io');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-chatonline:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/** CHAT JS */
let usersConnected = 0;
let users = [];

io.on('connection', (socket) => {
  usersConnected++;
  io.emit('usersConnected', usersConnected);

  socket.on('disconnect', () => {
    usersConnected--;

    let user = users.find(user => user.uid === socket.id);
    if (user) {
        user.online = false;
    }

    response = JSON.stringify(users);
    io.emit('userList', response);

    io.emit('usersConnected', usersConnected);
    
    if(user){
      socket.broadcast.emit('leftUser', user.name);
    }
  });

  socket.on('sendMessage', (msg, user) => {
    let response = {
      msg: msg,
      name: user.name,
      avatar: user.avatar
    };

    response = JSON.stringify(response);
    socket.broadcast.emit('sendMessage', response);
  });

  socket.on('attachSticker', (stickerSrc, user) => {
    socket.broadcast.emit('attachSticker', stickerSrc, user);
  });

  socket.on('writing', (user) => {
    socket.broadcast.emit('writing', user);
  });

  socket.on('stopWriting', (user) => {
    socket.broadcast.emit('stopWriting', user);
  });

  socket.on('userList', (user) => {
    users.push({
      uid: socket.id,
      name: user.name,
      avatar: user.avatar,
      online: true
    });

    response = JSON.stringify(users);
    socket.broadcast.emit('newUser', user.name);
    io.emit('userList', response);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
